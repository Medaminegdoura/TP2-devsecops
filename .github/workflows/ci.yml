name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  build:
    name: Build Application
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/
          retention-days: 1

  test:
    name: Run Unit Tests
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist

      - name: Run unit tests with coverage
        run: npm run test:cov

      - name: Upload coverage report to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov
          fail_ci_if_error: false

  # sast:
  #   name: SAST
  #   runs-on: ubuntu-latest
  #   needs: test

  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4

  #     # -------------------------
  #     # SAST: SEMGREP
  #     # -------------------------
  #     - name: Install Semgrep
  #       run: pip install semgrep

  #     - name: Run Semgrep (SAST)
  #       run: |
  #         semgrep --config=p/ci --json --output=semgrep-report.json || true
  #         python - <<'PY'
  #         import json, sys
  #         with open('semgrep-report.json') as f:
  #             data = json.load(f)
  #         findings = [r for r in data.get('results', []) if r.get('extra', {}).get('severity') in ['ERROR','HIGH','CRITICAL']]
  #         if findings:
  #             print(f"❌ SAST found {len(findings)} high/critical issues")
  #             for fnd in findings:
  #                 print(f"- {fnd['check_id']} at {fnd['path']}:{fnd['start']['line']}")
  #             sys.exit(1)
  #         else:
  #             print("✅ No high/critical SAST issues")
  #         PY

  sonarqube:
    name: SonarQube
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Shallow clones should be disabled for a better relevancy of analysis
      - name: SonarQube Scan
        uses: SonarSource/sonarqube-scan-action@v6
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  sca-dependency-check:
    name: OWASP Dependency-Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install Dependency-Check
        run: |
          wget https://github.com/jeremylong/DependencyCheck/releases/download/v12.1.0/dependency-check-12.1.0-release.zip
          unzip dependency-check-12.1.0-release.zip
          mv dependency-check /usr/local/bin/dependency-check

      - name: Run Dependency Check
        run: |
          /usr/local/bin/dependency-check/bin/dependency-check.sh \
          --project "MyProject" \
          --scan . \
          --format "HTML" \
          --out reports \
          --nvdApiKey ${{ secrets.NVD_API_KEY }} \
          --disableOssIndex

      - name: Upload Report
        uses: actions/upload-artifact@v4
        with:
          name: dependency-check-report
          path: reports
