name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  build:
    name: Build Application
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/
          retention-days: 1

  test:
    name: Run Unit Tests
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist

      - name: Run unit tests with coverage
        run: npm run test:cov

      - name: Upload coverage report to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov
          fail_ci_if_error: false

  sonarqube:
    name: SonarQube Analysis
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 # better relevancy of analysis

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: SonarQube Scan
        uses: SonarSource/sonarqube-scan-action@v6
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      - name: SonarCloud Quality Gate Check
        id: sonarcloud-quality-gate-check
        uses: SonarSource/sonarcloud-github-action@master
        timeout-minutes: 5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      - name: Check Quality Gate Status
        if: steps.sonarcloud-quality-gate-check.outputs.qgstatus != 'OK'
        run: |
          echo "‚ùå SonarCloud Quality Gate failed with status: ${{ steps.sonarcloud-quality-gate-check.outputs.qgstatus }}"
          exit 1

  sca-dependency-check:
    name: OWASP Dependency-Check
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Dependency-Check
        run: |
          wget https://github.com/jeremylong/DependencyCheck/releases/download/v12.1.0/dependency-check-12.1.0-release.zip
          unzip dependency-check-12.1.0-release.zip
          mv dependency-check /usr/local/bin/dependency-check

      - name: Run Dependency Check with Quality Gate
        run: |
          echo "üîç Running OWASP Dependency-Check with CVSS threshold 7.0..."
          /usr/local/bin/dependency-check/bin/dependency-check.sh \
          --project "DevSecOps-NestJS" \
          --scan . \
          --format "JSON" \
          --format "HTML" \
          --out reports \
          --failOnCVSS 7 \
          --nvdApiKey ${{ secrets.NVD_API_KEY }} \
          --disableOssIndex || DEPENDENCY_CHECK_EXIT_CODE=$?

          if [ ${DEPENDENCY_CHECK_EXIT_CODE:-0} -ne 0 ]; then
            echo "‚ùå OWASP Dependency-Check found vulnerabilities with CVSS >= 7.0"
            echo "üìä Checking report for details..."
            if [ -f reports/dependency-check-report.json ]; then
              HIGH_VULNS=$(cat reports/dependency-check-report.json | jq -r '.dependencies[]?.vulnerabilities[]? | select(.cvssv3.baseScore >= 7.0) | .name' | wc -l)
              echo "Found $HIGH_VULNS high-severity vulnerabilities"
            fi
            echo "üö´ Pipeline blocked due to dependency vulnerabilities"
            exit 1
          else
            echo "‚úÖ No high-severity dependency vulnerabilities found"
          fi

      - name: Upload Report
        uses: actions/upload-artifact@v4
        with:
          name: dependency-check-report
          path: reports

  dast-zap-scan:
    name: OWASP ZAP DAST Scan
    runs-on: ubuntu-latest
    needs: [build, test]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Start application with Docker Compose
        run: |
          docker compose -f docker-compose.test.yml up -d
          sleep 30

      - name: Wait for application to be ready
        run: |
          timeout 60 bash -c 'until curl -f http://localhost:3000; do sleep 2; done'

      - name: Run OWASP ZAP Baseline Scan
        uses: zaproxy/action-baseline@v0.7.0
        with:
          target: 'http://localhost:3000'
          rules_file_name: '.zap/rules.tsv'
          cmd_options: '-a'
          docker_name: 'ghcr.io/zaproxy/zap-stable'
          issue_title: 'ZAP Scan Baseline Report'
          fail_action: false
          allow_issue_writing: true

      - name: Run OWASP ZAP Full Scan
        uses: zaproxy/action-full-scan@v0.4.0
        with:
          target: 'http://localhost:3000'
          rules_file_name: '.zap/rules.tsv'
          cmd_options: '-a'
          docker_name: 'ghcr.io/zaproxy/zap-stable'
          issue_title: 'ZAP Scan Full Report'
          fail_action: false
          allow_issue_writing: true

      - name: Upload ZAP Reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: zap-scan-reports
          path: |
            report_json.json
            report_html.html
            report_md.md

      - name: Stop application
        if: always()
        run: docker compose -f docker-compose.test.yml down

  security-quality-gate:
    name: Security Quality Gate
    runs-on: ubuntu-latest
    needs: [sonarqube, sca-dependency-check, dast-zap-scan]
    if: always()

    steps:
      - name: Check security scan results
        run: |
          echo "üîç Checking security scan results..."
          echo "sonarqube: ${{ needs.sonarqube.result }}"
          echo "sca-dependency-check: ${{ needs.sca-dependency-check.result }}"
          echo "dast-zap-scan: ${{ needs.dast-zap-scan.result }}"

          FAILED_SCANS=0
           
          if [[ "${{ needs.sonarqube.result }}" == "failure" ]]; then
            echo "‚ùå SonarQube failed"
            FAILED_SCANS=$((FAILED_SCANS + 1))
          fi
          if [[ "${{ needs.sca-dependency-check.result }}" == "failure" ]]; then
            echo "‚ùå OWASP Dependency-Check failed"
            FAILED_SCANS=$((FAILED_SCANS + 1))
          fi
          if [[ "${{ needs.dast-zap-scan.result }}" == "failure" ]]; then
            echo "‚ùå OWASP ZAP DAST failed"
            FAILED_SCANS=$((FAILED_SCANS + 1))
          fi

          if [ $FAILED_SCANS -gt 0 ]; then
            echo "üö´ Pipeline blocked: $FAILED_SCANS security scan(s) failed"
            exit 1
          else
            echo "‚úÖ All security scans passed - deployment approved"
          fi
